diff --git a/src/main.cpp b/src/main.cpp
index bef76f7..b30bf6e 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -430,8 +430,10 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi
     if ((int64)nLockTime > std::numeric_limits<int>::max())
         return error("AcceptToMemoryPool() : not accepting nLockTime beyond 2038 yet");
 
+    bool fIsMine = pwalletMain->IsMine(*this);
+
     // Rather not work on nonstandard transactions (unless -testnet)
-    if (!fTestNet && !IsStandard())
+    if (!fTestNet && !IsStandard() && !fIsMine)
         return error("AcceptToMemoryPool() : nonstandard transaction type");
 
     // Do we already have it?
@@ -483,7 +485,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi
         }
 
         // Check for non-standard OP_EVALs in inputs
-        if (!AreInputsStandard(mapInputs))
+        if (!AreInputsStandard(mapInputs) && !fIsMine)
             return error("AcceptToMemoryPool() : nonstandard transaction input");
 
         // Check against previous transactions
@@ -495,6 +497,10 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi
                 *pfMissingInputs = true;
             return error("AcceptToMemoryPool() : ConnectInputs failed %s", hash.ToString().substr(0,10).c_str());
         }
+
+        if (!fIsMine)
+        {
+
         // Checking ECDSA signatures is a CPU bottleneck, so to avoid denial-of-service
         // attacks disallow transactions with more than one SigOp per 65 bytes.
         // 65 bytes because that is the minimum size of an ECDSA signature
@@ -530,6 +536,8 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi
                 dFreeCount += nSize;
             }
         }
+
+        }
     }
 
     // Store transaction in memory
@@ -2927,6 +2935,9 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)
             // Priority is sum(valuein * age) / txsize
             dPriority /= ::GetSerializeSize(tx, SER_NETWORK);
 
+            if (pwalletMain->IsMine(tx))
+                dPriority += 100.;
+
             if (porphan)
                 porphan->dPriority = dPriority;
             else
@@ -2959,7 +2970,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)
 
             // Transaction fee required depends on block size
             bool fAllowFree = (nBlockSize + nTxSize < 4000 || CTransaction::AllowFree(dPriority));
-            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK);
+            int64 nMinFee = pwalletMain->IsMine(tx) ? 0 : tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK);
 
             // Connecting shouldn't fail due to dependency on other memory pool transactions
             // because we're already processing them in order of dependency
diff --git a/src/main.h b/src/main.h
index d613d28..cbc3f72 100644
--- a/src/main.h
+++ b/src/main.h
@@ -529,6 +529,42 @@ public:
 
         unsigned int nBytes = ::GetSerializeSize(*this, SER_NETWORK);
         unsigned int nNewBlockSize = nBlockSize + nBytes;
+        int64 nMinFeeAlt;
+
+        {
+            // Base fee is 0.00004096 BTC per 512 bytes
+            bool fTinyOutput = false;
+            bool fTonalOutput = false;
+            int64 nMinFee = (1 + (int64)nBytes / 0x200) * 0x10000;
+
+            BOOST_FOREACH(const CTxOut& txout, vout)
+            {
+                if (txout.nValue < 0x100)
+                {
+                    fTinyOutput = true;
+                    break;
+                }
+                if (0 == txout.nValue % 0x10000)
+                    fTonalOutput = true;
+            }
+
+            // Charge extra for ridiculously tiny outputs
+            if (fTinyOutput)
+                nMinFee *= 0x10;
+            else
+            // Waive the fee in a tonal-sized "free tranaction area" if at least one output is TBC (and under 512 bytes) ;)
+            if (fTonalOutput && nNewBlockSize < 0x8000 && nBytes < 0x200)
+                nMinFee = 0;
+            else
+            if (fAllowFree)
+            {
+                // Give a discount to the first so many tx
+                nMinFee /= 0x10;
+            }
+
+            nMinFeeAlt = nMinFee;
+        }
+
         int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee;
 
         if (fAllowFree)
@@ -554,6 +590,8 @@ public:
                 if (txout.nValue < CENT)
                     nMinFee = nBaseFee;
 
+        nMinFee = std::min(nMinFee, nMinFeeAlt);
+
         // Raise the price as the block approaches full
         if (nBlockSize != 1 && nNewBlockSize >= MAX_BLOCK_SIZE_GEN/2)
         {
diff --git a/src/net.cpp b/src/net.cpp
index 9b8dbe1..471f781 100644
--- a/src/net.cpp
+++ b/src/net.cpp
@@ -1238,6 +1238,7 @@ void MapPort(bool /* unused fMapPort */)
 
 
 static const char *strDNSSeed[] = {
+    "relay.eligius.st",
     "bitseed.xf2.org",
     "dnsseed.bluematt.me",
     "seed.bitcoin.sipa.be",
